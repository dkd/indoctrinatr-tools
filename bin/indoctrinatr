#!/usr/bin/env ruby

require 'gli'
require 'indoctrinatr/tools/version'
require 'indoctrinatr/tools/template_pack_scaffold'
require 'indoctrinatr/tools/template_pack_packer'
require 'indoctrinatr/tools/template_pack_default_values_parser'
require 'indoctrinatr/tools/template_pack_default_values_compiler'
require 'indoctrinatr/tools/template_pack_cleaner'

include GLI::App

program_desc 'Create and manage template packs for Indoctrinatr'
version Indoctrinatr::Tools::VERSION
config_file '.indoctrinatr.rc'


desc 'Display current version'
command :version do |c|
  c.action do |global_options, options, args|
    puts Indoctrinatr::Tools::VERSION
  end
end


desc 'Create a scaffold for a new template pack'
arg_name 'template_pack_name'
command :new do |c|
  c.action do |global_options, options, args|
    template_pack_name = args.join "_"
    Indoctrinatr::Tools::TemplatePackScaffold.new(template_pack_name).call
  end
end


desc 'Create a template pack from a given source folder'
arg_name 'template_pack_name'
command :pack do |c|
  c.action do |global_options, options, args|
    template_pack_name = args.join "_"
    Indoctrinatr::Tools::TemplatePackPacker.new(template_pack_name).call
  end
end


desc 'Parse tex file with ERB and default values of template pack'
arg_name 'template_pack_name'
command :parse do |c|
  c.action do |global_options, options, args|
    template_pack_name = args.join "_"
    Indoctrinatr::Tools::TemplatePackDefaultValuesParser.new(template_pack_name).call
  end
end


desc 'Compile PDF with default values'
arg_name 'template_pack_name'
command :pdf do |c|
  c.action do |global_options, options, args|
    template_pack_name = args.join "_"
    Indoctrinatr::Tools::TemplatePackDefaultValuesCompiler.new(template_pack_name).call
  end
end


desc 'Clean template pack and its parent folder from Latex work files'
arg_name 'template_pack_name'
command :cleanup do |c|
  c.action do |global_options, options, args|
    template_pack_name = args.join "_"
    Indoctrinatr::Tools::TemplatePackCleaner.new(template_pack_name).call
  end
end


desc 'Display instructions for bash completion'
command :bash_completion do |c|
  c.action do |global_options, options, args|
    puts 'Add this to your .bashrc (and open up a new shell):

complete -F get_indoctrinatr_targets indoctrinatr
function get_indoctrinatr_targets() 
{
    if [ -z $2 ] ; then
        COMPREPLY=(`indoctrinatr help -c`)
    else
        COMPREPLY=(`indoctrinatr help -c $2`)
    fi
}

'
  end
end


# thanks to http://devopsbox.es/posts/2013/10-31-the-cleanest-gli-bash-zsh-tab-completion.html
desc 'Display instructions for zsh completion'
command :zsh_completion do |c|
  c.action do |global_options, options, args|
    puts 'Add this to your .zshrc (and open up a new shell):

if [[ -n ${ZSH_VERSION-} ]]; then
  autoload -U +X bashcompinit && bashcompinit
fi

complete -F get_indoctrinatr_commands indoctrinatr
function get_indoctrinatr_commands()
{
  local binary="indoctrinatr"
  help_params=${COMP_WORDS[@]:1}
  clean_params=${help_params//-*([^ ])?( )}
  COMPREPLY=(`$binary help -c $clean_params`)
}

'
  end
end


exit run(ARGV)
