#!/usr/bin/env ruby

require 'gli'
require 'indoctrinatr/tools/version'
require 'indoctrinatr/tools/template_pack_demo'
require 'indoctrinatr/tools/template_pack_scaffold'
require 'indoctrinatr/tools/template_pack_packer'
require 'indoctrinatr/tools/template_pack_default_values_parser'
require 'indoctrinatr/tools/template_pack_default_values_compiler'
require 'indoctrinatr/tools/template_pack_documentation'

include GLI::App
include Indoctrinatr::Tools

program_desc 'Create and manage Template Packs for Indoctrinatr'
version Indoctrinatr::Tools::VERSION
config_file '.indoctrinatr.rc'

desc 'Display current version'
command :version do |c|
  c.action do
    puts Indoctrinatr::Tools::VERSION
  end
end

desc 'Display the suggested workflow'
command :workflow do |c|
  c.action do
    puts 'The workflow for a project (e.g. demo) typically looks like this:

1. Run in shell: indoctrinatr new demo
   Creates a new Indoctrinatr Template Pack in the folder demo

2. Edit demo.tex.erb and configuration.yaml according to needs

3. Run in shell: indoctrinatr parse demo
   Parses tex file demo_with_default_values.tex with ERB and default values from configuration.yaml

4. Run in shell: indoctrinatr pdf demo
   Compiles PDF from demo_with_default_values.tex

5. Run in shell: indoctrinatr pack demo
   Creates demo.zip with all required file for upload to Indoctrinatr server

'
  end
end

desc 'Create, compile and pack a demo project'
command :demo do |c|
  c.action do
    Indoctrinatr::Tools::TemplatePackDemo.new('demo').call
  end
end

desc 'Create a scaffold for a new Template Pack'
arg_name 'template-pack-name'
command :new do |c|
  c.action do |_, _, args|
    template_pack_name = args.join '_'
    Indoctrinatr::Tools::TemplatePackScaffold.new(template_pack_name).call
  end
end

desc 'Parse XeTeX file with ERB and default values of Template Pack'
arg_name 'template_pack_name'
command :parse do |c|
  c.action do |_, _, args|
    template_pack_name = args.join '_'
    Indoctrinatr::Tools::TemplatePackDefaultValuesParser.new(template_pack_name).call
  end
end

desc 'Compile PDF with default values'
arg_name 'template_pack_name'
command :pdf do |c|
  c.action do |_, _, args|
    template_pack_name = args.join '_'
    TemplatePackDefaultValuesParser.new(template_pack_name).call
    Indoctrinatr::Tools::TemplatePackDefaultValuesCompiler.new(template_pack_name).call
  end
end

desc 'Create a documentation from a given source folder'
arg_name 'template_pack_name'
command :doc do |c|
  c.action do |_, _, args|
    template_pack_name = args.join '_'
    TemplatePackDefaultValuesParser.new(template_pack_name).call # hierarchy - these files are needed. Unfortunately GLI::App does not offer to run other commands
    TemplatePackDefaultValuesCompiler.new(template_pack_name).call
    Indoctrinatr::Tools::TemplatePackDocumentation.new(template_pack_name).call
  end
end

desc 'Create a Template Pack from a given source folder'
arg_name 'template_pack_name'
command :pack do |c|
  c.action do |_, _, args|
    template_pack_name = args.join '_'
    Indoctrinatr::Tools::TemplatePackPacker.new(template_pack_name).call
  end
end

desc 'Display instructions for bash completion'
command :bashcompletion do |c|
  c.action do
    puts 'Add this to your .bashrc (and open up a new shell):

complete -F get_indoctrinatr_targets indoctrinatr
function get_indoctrinatr_targets()
{
    if [ -z $2 ] ; then
        COMPREPLY=(`indoctrinatr help -c`)
    else
        COMPREPLY=(`indoctrinatr help -c $2`)
    fi
}

'
  end
end

# thanks to http://devopsbox.es/posts/2013/10-31-the-cleanest-gli-bash-zsh-tab-completion.html
desc 'Display instructions for zsh completion'
command :zshcompletion do |c|
  c.action do
    puts 'Add this to your .zshrc (and open up a new shell):

if [[ -n ${ZSH_VERSION-} ]]; then
  autoload -U +X bashcompinit && bashcompinit
fi

complete -F get_indoctrinatr_commands indoctrinatr
function get_indoctrinatr_commands()
{
  local binary="indoctrinatr"
  help_params=${COMP_WORDS[@]:1}
  clean_params=${help_params//-*([^ ])?( )}
  COMPREPLY=(`$binary help -c $clean_params`)
}

'
  end
end

exit run(ARGV)
