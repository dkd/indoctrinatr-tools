#!/usr/bin/env ruby
require 'bundler/setup'
require 'dry/cli'

# desc 'Create, compile and pack a demo project'
# command :demo do |c|
#   c.action do
#     TemplatePackDemo.new('demo').call
#   end
# end

# desc 'Create a Template Pack from a given source folder'
# arg_name 'template_pack_name'
# command :pack do |c|
#   c.action do |global_options, _, _|
#     template_pack_name = global_options['template_pack_name']
#     TemplatePackPacker.new(template_pack_name).call
#   end
# end

require 'indoctrinatr/tools/template_pack_scaffold'
require 'indoctrinatr/tools/template_pack_default_values_parser'
require 'indoctrinatr/tools/template_pack_default_values_compiler'
require 'indoctrinatr/tools/template_pack_fieldnames_creator'
require 'indoctrinatr/tools/template_pack_error_checker'
require 'indoctrinatr/tools/template_pack_documentation'

module Indoctrinatr
  module Tools
    module Commands
      extend Dry::CLI::Registry

      class Version < Dry::CLI::Command
        desc 'Print version of indoctrinatr-tools.'

        def call(*)
          puts Indoctrinatr::Tools::VERSION
        end
      end

      class Scaffold < Dry::CLI::Command
        desc 'Scaffold new project'

        argument :template_pack_name, desc: 'Name of template pack'

        def call(template_pack_name:, **)
          TemplatePackScaffold.new.call(template_pack_name) do |result|
            result.success do
              puts "A template pack scaffold was created in folder '#{template_pack_name}'. Happy templatingâ€¦"
            end

            result.failure do |message|
              puts message
            end
          end
        end
      end

      class Parse < Dry::CLI::Command
        desc 'Parse XeTeX file with ERB and default values of Template Pack'

        argument :template_pack_name, desc: 'Name of template pack'
        def call(template_pack_name:, **)
          TemplatePackDefaultValuesParser.new.call(template_pack_name) do |result|
            result.success do
              puts "The template pack '#{template_pack_name}' has been successfully parsed with default values."
            end

            result.failure do |message|
              puts message
            end
          end
        end
      end

      class Pdf < Dry::CLI::Command
        desc 'Compile PDF with default values'

        argument :template_pack_name, desc: 'Name of template pack'
        option :keep_aux_files, default: 'false', values: %w[true false], desc: 'The option to keep aux files'

        def call(template_pack_name:, **options)
          TemplatePackDefaultValuesParser.new.call(template_pack_name) do |result|
            result.success do
            end
            result.failure do |message|
              puts message
              return
            end
          end
          keep_aux_files = options.fetch(:keep_aux_files) == 'true'
          TemplatePackDefaultValuesCompiler.new.call(template_pack_name:, keep_aux_files:) do |result|
            result.success do
            end
            result.failure do |message|
              puts message
            end
          end
        end
      end

      class Workflow < Dry::CLI::Command
        desc 'Display the suggested workflow'
        def call(**)
          puts <<~HEREDOC
            The workflow for a project (e.g. demo) typically looks like this:

            1. Run in shell: indoctrinatr new demo
               Creates a new Indoctrinatr Template Pack in the folder demo

            2. Edit demo.tex.erb and configuration.yaml according to needs

            3. Run in shell: indoctrinatr parse demo
               Parses tex file demo_with_default_values.tex with ERB and default values from configuration.yaml

            4. Run in shell: indoctrinatr pdf demo
               Compiles PDF from demo_with_default_values.tex

            5. Run in shell: indoctrinatr check demo
               Analyzes your Template Pack for potential errors

            6. Run in shell: indoctrinatr doc demo
               Creates a technical documentation for the Template Pack

            7. Run in shell: indoctrinatr pack demo
               Creates demo.zip with all required file for upload to Indoctrinatr server
          HEREDOC
        end
      end

      class PdfWithFieldNames < Dry::CLI::Command
        desc 'Compile PDF with Variable Names as values'

        argument :template_pack_name, desc: 'Name of template pack'
        option :keep_aux_files, default: 'false', values: %w[true false], desc: 'The option to keep aux files'

        def call(template_pack_name:, **options)
          keep_aux_files = options.fetch(:keep_aux_files) == 'true'
          TemplatePackFieldnamesCreator.new.call(template_pack_name:, keep_aux_files:) do |result|
            result.success do
            end
            result.failure do |message|
              puts message
            end
          end
        end
      end

      class Check < Dry::CLI::Command
        desc 'Display the suggested workflow'

        argument :template_pack_name, desc: 'Name of template pack'

        def call(template_pack_name:, **)
          TemplatePackErrorChecker.new.call(template_pack_name) do |result|
            result.success do
            end
            result.failure do |message|
              puts message
              return
            end
          end
        end
      end

      class Doc < Dry::CLI::Command
        desc 'Create a documentation from a given source folder'

        argument :template_pack_name, desc: 'Name of template pack'
        option :keep_aux_files, default: 'false', values: %w[true false], desc: 'The option to keep aux files'

        def call(template_pack_name:, **options)
          keep_aux_files = options.fetch(:keep_aux_files) == 'true'
          TemplatePackDocumentation.new.call(template_pack_name:, keep_aux_files:) do |result|
            result.success do
            end
            result.failure do |message|
              puts message
            end
          end
        end
      end

      register 'version', Version, aliases: %w[v -v --version]
      register 'new', Scaffold
      register 'parse', Parse
      register 'pdf', Pdf
      register 'pdf_with_field_names', PdfWithFieldNames
      register 'doc', Doc
      register 'check', Check
      register 'workflow', Workflow
    end
  end
end

Dry::CLI.new(Indoctrinatr::Tools::Commands).call
